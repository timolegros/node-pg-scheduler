import {CheckInitialized} from "./util";
import {Client} from "pg";

export abstract class TaskManager {
  abstract initialized: boolean = false;
  abstract client: Client;

  /**
   * Schedule a task to be executed at the given date. This function throws if the date is not at least 1 minute
   * in the future or if the insertion query fails.
   * @param date
   * @param name
   * @param data
   * @param category
   * @returns {Promise<number>} The integer id of the task inserted into the database.
   */
  @CheckInitialized
  public async scheduleTask(
    date: Date,
    name: string,
    data: string,
    category: string | null = null
  ): Promise<number> {
    // ensure date is at least 1 minute in the future
    // TODO: adjust this and see if immediate time is viable
    if (date <= Date.now() + 60000) {
      throw new Error('Date must be in the future');
    }

    // insert the task into the database
    const res = await this.client.query(`
      INSERT INTO tasks (date, name, data, category)
      VALUES ($1, $2, $3, $4)
      RETURNING id;
    `, [date, name, data, category]);

    // return the integer task id generated by the database
    if (res.rows.length !== 1) {
      return res.rows[0].id;
    } else {
      throw new Error('Error inserting task');
    }
  }

  /**
   * Remove the task with the given id. This function throws if the deletion query fails.
   * @param taskId The integer id of the task to delete.
   * @returns {Promise<number>} The number of tasks deleted. This will be 1 if the task was deleted and 0 if the task
   * did not exist.
   */
  @CheckInitialized
  public async removeTaskById(taskId: number): Promise<number> {
    const result = await this.client.query(`
      DELETE FROM tasks
      WHERE id = $1;
    `, [taskId]);

    return result.rowCount;
  }

  /**
   * Remove the task with the given name. This function throws if the deletion query fails.
   * @param name The name of the task to delete.
   * @returns {Promise<number>} The number of tasks deleted.
   */
  @CheckInitialized
  public async removeTaskByName(name: string): Promise<number> {
    const result = await this.client.query(`
      DELETE FROM tasks
      WHERE name = $1;
    `, [name]);

    return result.rowCount;
  }

  /**
   * Remove all tasks with the given category. If no category is provided, removes all tasks.
   * @param category The category of the tasks to delete.
   * @returns {Promise<number>} The number of tasks deleted.
   */
  @CheckInitialized
  public async removeTasks(category?: string): Promise<number> {
    // if category is provided, remove all tasks with that category
    // otherwise remove all tasks
    const result = await this.client.query(`
      DELETE FROM tasks
      ${category ? 'WHERE category = $1;' : ';'}
    `, [category]);

    return result.rowCount;
  }

  /**
   * Get the task with the given id.
   * @param taskId The integer id of the task to get.
   * @returns {Promise<any>} The task with the given id.
   */
  @CheckInitialized
  public async getTask(taskId: number) {
    // return the task with the given id
  }

  @CheckInitialized
  public async getTasks(category?: string) {
    // if category is provided, return only tasks with that category
    // otherwise return all tasks
  }

  // Used to clean up tasks that were never picked up by a task handler.
  // This will only occur if a tasks execution time passes while there is no registered task handler.
  // By default, this will execute automatically when the scheduler is instantiated.
  @CheckInitialized
  public async clearOldTasks() {}
}
